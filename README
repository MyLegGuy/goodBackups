goodBackups - Free backup and hashing software for Linux.

About
-----
Given a database, destination file, and as many folder paths as you want:
It looks through the folder. 
If a certain file's name is in the database, it hashes it and compares its hash to the one in the database. If it's wrong, it tells you.
If a certian file's name isn't in the database, it hahes it and adds it to the database.
Once it's done looking through the folder, it looks for all database entries that were not used. Those files were missing from the folder.
It checks the other folders you supplied and see if they have the missing files. If so, the files are copied and verified.
This process repeats for all other folders supplied.

Usage
-----
* All paths must be absolute
* All folders should end in a slash
* You must specify a mode as an optional arg. See "Modes".
./a.out <db file> <primary folder> [backup folder 1] [backup folder ...] <mode> [optional args]

Optional args
-------------
Just append these to the end of your command. If you spell them wrong, they'll be interpreted as bad folder names.
--newdb
	* Pass this if you're making a new database. 
--addFromBackups
	* Allows files that are in the backup folders to be added to the database.
	* By default, this is disabled and only files from primary folder are added to database.
		* Be careful. If you delete a file from the primary folder and the database and then run this program, it'll bring the file back from the dead.
	* If you enable this option, files added to the database from the backup folder won't affect the folders before it until the next run.
--include <include list file>
--exclude <exclude list file>
--primaryCanRestoreMissing
	* By default, files missing from the primary folder will not be restored automatically like they would be if it was a backup folder. This enables restoring files missing from primary folder.

Excluding/Including Specific Files
----------------------------------
Pass these as optional args:
--include <Include File List path>
--exclude <Exclude File List path>
If you pass an include list, that means every other file is excluded by default.
You can pass an exclude list to exclude only the files you don't want and include everything else.
You can pass both at the same time. The exclude list would exclude files that already passed the include file list filter. This is useful if you use wildcards.
Format of the include/exclude file list:
Each line has one pattern.
Each pattern starts with a letter to signify how it matches. Here are your options:
'f' - match files based on just their names
'd' - match directories based on just their names
'a' - match both files and directories based on just their names (all)
You you make the letter capital if you want to match based on the full filepath. So 'F', 'D', and 'A' are also options.
After that letter you put a space.
After the space goes the pattern.
The only special thing it supports is '*' as a wildcard. Using '*' will match the least amount of wildcard characters, potentially 0.
If you want an actual '*', use '\*'. And if you want a backslash, use '\\'.
Comments must go on their own line and start with '#'.
Example exclude list:
# exclude any file named "happy"
f happy
# exclude any file with a name starting with "[Horrible"
f [Horrible*
# exclude any file named '*\"
f \*\\
# exclude the directory named "garbage"
d garbage
# exclude the directory at /tmp/bla
D /tmp/bla

Modes
-----
--update
	* Will look for files that aren't in the database and add those.
	* Will look for files missing from backup folders and copy them primary folder
--full
	* Same as --update, but will also verify files that are already in the database.
--listMissing
	* Just list files that are in database but not in folder.
